name: ci

on: [push]

jobs:
  backend-build:
    name: Backend build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/metrik:latest
          file: ./backend/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max

  backend-tests:
    name: Backend tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
          cache: yarn
          cache-dependency-path: backend/yarn.lock
      - run: yarn --frozen-lockfile
      - run: yarn test:coverage

  metrics-init:
    name: Metrics initialisation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: date '+%s' > ci-start.txt
      - uses: actions/upload-artifact@v2
        with:
          name: metrics
          path: ci-start.txt

  metrics:
    name: Metrics report
    runs-on: ubuntu-latest
    needs: [backend-build, backend-tests, metrics-init]
    steps:
      - uses: actions/checkout@v2
      - run: echo number_of_files=$(find backend/src frontend/src -type f -name '*.ts' -o -name '*.tsx' | wc -l) >> $GITHUB_ENV
      - run: echo lines_of_code=$(cat $(find backend/src frontend/src -type f -name '*.ts' -o -name '*.tsx') | wc -l) >> $GITHUB_ENV
      - uses: actions/download-artifact@v2
        with:
          name: metrics
      - run: echo ci_time=$(($(date '+%s') - $(cat ci-start.txt))) >> $GITHUB_ENV
      - run: |
          curl ${{ secrets.METRIK_API_URL }}/project/${{ secrets.METRIK_PROJECT_ID }}/metrics-snapshot \
            --fail \
            --request POST \
            --header 'Authorization: Beer ${{ secrets.METRIK_TOKEN }}' \
            --header 'Content-Type: application/json' \
            --data "{\"metrics\":[{\"label\":\"source files\",\"value\":$number_of_files},{\"label\":\"lines of code\",\"value\":$lines_of_code},{\"label\":\"ci time\",\"value\":$ci_time}]}"
